参见：
Android多进程使用场景
	http://blog.spinytech.com/2016/11/17/android_multiple_process_usage_scenario/
关于 Android 应用多进程的整理
	http://droidyue.com/blog/2017/01/15/android-multiple-processes-summary/

为什么使用多进程：
是app能申请到更多内存，因为系统是针对于进程来分配资源的，而多个进程均属于同一app
	当一个模块是很耗内存的（如：加载并缓存图片），那么该模块建议放入到新进程中
	因为：如果该模块 还和 主模块在同一个进程中，那么主模块使用的内存是有限的（因为一个进程被分配的内存是有限的），那么主模块可能会因为申请不到内存而oom
业务场景要求：业务模块A 在主模块退出时 仍然需要运行
	如：主模块退出后，推送模块 仍然在运行
进程不易被杀死：进程所占用的内存变低（原来在进程A中所要求的内存，现在在进程B中进行了申请），则当进程被列入到候选死亡名单时，因为内存占用低，也不易被杀死
自身的崩溃并不会影响到其他进程：当一个进程崩溃时，不会影响到另外一个进程

android:process
如果以 : 开头
	表示这个进程是app私有的，其他app的组件 不能 运行在该进程中
	注意，经过测试：外部app还可以bind到该service（虽然该service运行在该私有进程上），ipc调用还是可以正常进行
如果以 小写字母 开头
	表示这个进程为全局进程，其他app的组件 可以 运行在该进程中
	参见：不同的app运行在同一进程中.txt
--
例子：
<activity android:name=".MusicPlayerActivity" android:process=":music"/>
<activity android:name=".AnotherActivity" android:process="droidyue.com"/>

注意：
. Application#onCreate会多次调用
. 内存是不同共享的，因为是不同的进程（单例 在多进程间 已经作废）

------------------------------------之下为老的内容

谨慎使用多进程
使用多进程可以把应用中的部分组件运行在单独的进程当中，这样可以扩大应用的内存占用范围，
但是这个技术必须谨慎使用，绝大多数应用都不应该贸然使用多进程，
	一方面是因为使用多进程会使得代码逻辑更加复杂，另外如果使用不当，它可能反而会导致显著增加内存。
	
什么时候考虑使用	
当你的应用需要运行一个常驻后台的任务，而且这个任务并不轻量，可以考虑使用这个技术。
一个典型的例子是创建一个可以长时间后台播放的Music Player。
如果整个应用都运行在一个进程中，当后台播放的时候，前台的那些UI资源也没有办法得到释放。
	（猜想：如果带ui的部分变成了 background进程，那么应该交由系统来释放。
	如果app只有一个进程，而该进程，此刻又在执行播放任务，则整个进程的优先级 告诉系统不要杀死该进程，那么那些无用的ui资源就无法得到释放）
类似这样的应用可以切分成2个进程：一个用来操作UI，另外一个给后台的Service。